// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesCatalogue.Context;

#nullable disable

namespace MoviesCatalogue.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MoviesCatalogue.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Fantasy",
                            CreatedDate = new DateTime(2023, 4, 7, 23, 46, 52, 543, DateTimeKind.Utc).AddTicks(957),
                            Name = "Harry Potter and the Sorcerer's Stone",
                            ReleaseYear = 2001,
                            Synopsis = "Harry Potter's life is miserable. His parents are dead and he's stuck with his heartless relatives, who force him to live in a tiny closet under the stairs.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = "Fantasy",
                            CreatedDate = new DateTime(2023, 4, 7, 23, 46, 52, 543, DateTimeKind.Utc).AddTicks(963),
                            Name = "Harry Potter and the Chamber of Secrets",
                            ReleaseYear = 2002,
                            Synopsis = "Ever since Harry Potter had come home for the summer, the Dursleys had been so mean and hideous that all Harry wanted was to get back to the Hogwarts School for Witchcraft and Wizardry. ",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = "Sports drama",
                            CreatedDate = new DateTime(2023, 4, 7, 23, 46, 52, 543, DateTimeKind.Utc).AddTicks(965),
                            Name = "Rocky",
                            ReleaseYear = 1976,
                            Synopsis = "Rocky is a small-time Philadelphia boxer going nowhere, until an unbelievable shot to fight the world heavyweight champion lights a fire inside him.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Category = "Kids",
                            CreatedDate = new DateTime(2023, 4, 7, 23, 46, 52, 543, DateTimeKind.Utc).AddTicks(967),
                            Name = "Bee Movie",
                            ReleaseYear = 2007,
                            Synopsis = "Barry, a worker bee stuck in a dead-end job making honey, sues humans when he learns they've been stealing bees' nectar all along.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Category = "Action & Adventure",
                            CreatedDate = new DateTime(2023, 4, 7, 23, 46, 52, 543, DateTimeKind.Utc).AddTicks(969),
                            Name = "Fast Five",
                            ReleaseYear = 2011,
                            Synopsis = "Brian and Mia break Dom out of prison and head to Brazil to put together a racing team -- and take on a drug dealer who wants to kill them.",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MoviesCatalogue.Models.RatedMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("RatedMovies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 1,
                            Rate = 9,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 2,
                            Rate = 7,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MoviesCatalogue.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "josuechacon@gmail.com",
                            Name = "Josue Chacon",
                            Password = "@dmi321!",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "alexander@gmail.com",
                            Name = "Alexander Villeda",
                            Password = "us3r321!",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("MoviesCatalogue.Models.Movie", b =>
                {
                    b.HasOne("MoviesCatalogue.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesCatalogue.Models.RatedMovie", b =>
                {
                    b.HasOne("MoviesCatalogue.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.HasOne("MoviesCatalogue.Models.User", "User")
                        .WithMany("RatedMovies")
                        .HasForeignKey("UserId");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesCatalogue.Models.User", b =>
                {
                    b.Navigation("RatedMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
